sprintf("E(s) = %f", setEntropy)
#E(S)
#Entropy of mushroom data set
#9 edible, 7 inedible
setEntropy <- (-9/16.0 * log2(9/16.0)) - (7/16.0 * log2(7/16.0))
sprintf(E(s) = %f, setEntropy)
#Gain(S, Size)
#Information gain by splitting on size
sizeSmallEntropy <- (-6/8.0 * log2(6/8.0)) - (2/8.0 * log2(2/8.0))
sizeLargeEntropy <- (-3/8.0 * log2(3/8.0)) - (5/8.0 * log2(5/8.0))
sprintf("E(S_small) = %f", sizeSmallEntropy)
sprintf("E(S_large) = %f", sizeLargeEntropy)
sizeInfoGain <- setEntropy - (8/16.0 * sizeSmallEntropy) - (8/16.0 * sizeLargeEntropy)
sprintf("Gain(S, size) = %f", sizeInfoGain)
#E(S)
#Want to find edible mushrooms
#Entropy of mushroom data set
#9 edible, 7 inedible
setEntropy <- (-9/16.0 * log2(9/16.0)) - (7/16.0 * log2(7/16.0))
sprintf("E(s) = %f", setEntropy)
#Gain(S, Color)
#Information gain by splitting on color
#{Green, Yellow}
colorGreenEntropy <- (-1/3.0 * log2(1/3.0)) - (2/3.0 * log2(2/3.0))
colorYellowEntropy <- (-8/13.0 * log2(8/13.0)) - (5/13.0 * log2(5/13.0))
sprintf("E(S_green) = %f", colorGreenEntropy)
sprintf("E(S_yellow) = %f", colorYellowEntropy)
colorInfoGain <- setEntropy - (3/16.0 * colorGreenEntropy) - (13/16.0 * colorYellowEntropy)
sprintf("Gain(S, color) = %f", colorInfoGain)
#Gain(S, Shape)
#Information gain by splitting on shape
#{Round, Irregular}
shapeRoundEntropy <- (6/12.0 * log2(6/12.0)) - (6/12.0 * log2(6/12.0))
shapeIrregularEntropy <- (3/4.0 * log2(3/4.0)) - (1/4.0 * log2(1/4.0))
sprintf("E(S_round) = %f", shapeRoundEntropy)
sprintf("E(S_irregular) = %f", shapeIrregularEntropy)
shapeInfoGain <- setEntropy - (12/16.0 * shapeRoundEntropy) - (4/16.0 * shapeIrregularEntropy)
sprintf("Gain(S, shape) = %f", shapeInfoGain)
#Gain(S, Shape)
#Information gain by splitting on shape
#{Round, Irregular}
shapeRoundEntropy <- (-6/12.0 * log2(6/12.0)) - (6/12.0 * log2(6/12.0))
shapeIrregularEntropy <- (-3/4.0 * log2(3/4.0)) - (1/4.0 * log2(1/4.0))
sprintf("E(S_round) = %f", shapeRoundEntropy)
sprintf("E(S_irregular) = %f", shapeIrregularEntropy)
shapeInfoGain <- setEntropy - (12/16.0 * shapeRoundEntropy) - (4/16.0 * shapeIrregularEntropy)
sprintf("Gain(S, shape) = %f", shapeInfoGain)
#SUMMARY
sprintf("Gain(S, size) = %f", sizeInfoGain)
sprintf("Gain(S, color) = %f", colorInfoGain)
sprintf("Gain(S, shape) = %f", shapeInfoGain)
#E(S)
#Want to find edible mushrooms
#Entropy of mushroom data set
#9 edible, 7 inedible
setEntropy <- (-9/16.0 * log2(9/16.0)) - (7/16.0 * log2(7/16.0))
sprintf("E(s) = %f", setEntropy)
#Gain(S, Size)
#Information gain by splitting on size
#{Small, Large}
sizeSmallEntropy <- (-6/8.0 * log2(6/8.0)) - (2/8.0 * log2(2/8.0)) #edible - inedible
sizeLargeEntropy <- (-3/8.0 * log2(3/8.0)) - (5/8.0 * log2(5/8.0))
sprintf("E(S_small) = %f", sizeSmallEntropy)
sprintf("E(S_large) = %f", sizeLargeEntropy)
sizeInfoGain <- setEntropy - (8/16.0 * sizeSmallEntropy) - (8/16.0 * sizeLargeEntropy)
sprintf("Gain(S, size) = %f", sizeInfoGain)
#Gain(S, Color)
#Information gain by splitting on color
#{Green, Yellow}
colorGreenEntropy <- (-1/3.0 * log2(1/3.0)) - (2/3.0 * log2(2/3.0))
colorYellowEntropy <- (-8/13.0 * log2(8/13.0)) - (5/13.0 * log2(5/13.0))
sprintf("E(S_green) = %f", colorGreenEntropy)
sprintf("E(S_yellow) = %f", colorYellowEntropy)
colorInfoGain <- setEntropy - (3/16.0 * colorGreenEntropy) - (13/16.0 * colorYellowEntropy)
sprintf("Gain(S, color) = %f", colorInfoGain)
#Gain(S, Shape)
#Information gain by splitting on shape
#{Round, Irregular}
shapeRoundEntropy <- (-6/12.0 * log2(6/12.0)) - (6/12.0 * log2(6/12.0))
shapeIrregularEntropy <- (-3/4.0 * log2(3/4.0)) - (1/4.0 * log2(1/4.0))
sprintf("E(S_round) = %f", shapeRoundEntropy)
sprintf("E(S_irregular) = %f", shapeIrregularEntropy)
shapeInfoGain <- setEntropy - (12/16.0 * shapeRoundEntropy) - (4/16.0 * shapeIrregularEntropy)
sprintf("Gain(S, shape) = %f", shapeInfoGain)
library(readr)
training <- read_csv("~/Desktop/ML_CS529/project1/CS529/training.csv")
View(training)
help(wspace)
worspace
setwd("~/Desktop/ML_CS529/project1/CS529")
library(readr)
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("training.csv", header = FALSE)
source('~/Desktop/ML_CS529/project1/CS529/treeTest.R', echo=TRUE)
View(training)
source('~/Desktop/ML_CS529/project1/CS529/treeTest.R', echo=TRUE)
View(datasetEntropy)
View(infoGain)
View(datasetEntropy)
source('~/Desktop/ML_CS529/project1/CS529/treeTest.R', echo=TRUE)
View(training)
yes <- count(training$Play == 'Yes')
#Elizabeth E. Esterly
#Last revision 09/10/2017
#treeTest.R
#predict: play ball == yes
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
total <- nrow(training)
print(total)
#Elizabeth E. Esterly
#Last revision 09/10/2017
#treeTest.R
#predict: play ball == yes
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
print(total)
#calculate entropy of data set
dEnt <- datasetEntropy(training)
print(dEnt)
#Elizabeth E. Esterly
#Last revision 09/10/2017
#treeTest.R
#predict: play ball == yes
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
print(total)
#calculate entropy of data set
dEnt <- datasetEntropy(training)
print(dEnt)
install.packages("plyr")
#Elizabeth E. Esterly
#Last revision 09/10/2017
#treeTest.R
#predict: play ball == yes
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
print(total)
#calculate entropy of data set
dEnt <- datasetEntropy(training)
print(dEnt)
dEnt <- datasetEntropy(training)
#Elizabeth E. Esterly
#Last revision 09/10/2017
#treeTest.R
#predict: play ball == yes
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training)
print(dEnt)
source('~/Desktop/ML_CS529/project1/CS529/treeTest.R', echo=TRUE)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
print(dEnt)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
print(dEnt)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c(Yes, No))
print(dEnt)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c('Yes', 'No'))
print(dEnt)
#calculate info gain for attributes
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, 'Yes')
print(dEnt)
print(training$Play)
"Yes"
'Yes'
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, "Yes")
print(dEnt)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
howMany <- count(training$Play, "Yes")
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
howMany <- count(training, "Yes")
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
howMany <- count(training, Yes)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
howMany <- count(training, 'Yes')
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
howMany <- count(training, Hot)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
yes <- training$Play == "Yes"
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
yes <- filter(training$Play == "Yes")
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
yes <- filter(training, training$Play == "Yes")
count(training)
print(yes)
library(readr)
library(plyr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#calculate entropy of data set
yes <- tabulate(training$Play)
help(tabulate)
table(training)
table(training$Play == "Yes")
ass <- table(training$Play == "Yes")
ass$False
size(ass)
length(ass)
length(ass[1])
ass[1]
ass$FALSE
ass[FALSE]
ass[1, FALSE]
ass[1]
filter(training$Play, "Yes")
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
filter(training$Play, "Yes")
View(training)
t <- table(training$Play)
t
sum(training$Play == "Yes")
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
print(dEnt)
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
print(dEnt)
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
View(training)
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
#read training data
#this is specific to my setup, just for testing
setwd("~/Desktop/ML_CS529/project1/CS529")
training <- read_csv("weatherTraining.csv")
#deal with NAs and NANs here
#calculate entropy of data set
#passing a data column makes it into a vector
dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
library(readr)
source("util.R")
args <- commandArgs(trailingOnly = TRUE)
#read training data
training <- read_csv(args[1])
#print to console
print(training)
#--------deal with NAs and NANs here in more complex datasets----#
#calculate entropy of data set
#Entropy(S) = 0.940286
#dEnt <- datasetEntropy(training$Play, c("Yes", "No"))
outcomes <- unlist(strsplit(args[3], ","))
print(outcomes)
dEnt <- datasetEntropy(training$Play, outcomes)
print(dEnt)
